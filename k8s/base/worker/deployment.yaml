apiVersion: apps/v1
kind: Deployment
metadata:
  name: mbhealth-worker
  namespace: mbhealth
  labels:
    app.kubernetes.io/name: mbhealth-worker
    app.kubernetes.io/component: worker
    app.kubernetes.io/part-of: mbhealth
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mbhealth-worker
      app.kubernetes.io/component: worker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mbhealth-worker
        app.kubernetes.io/component: worker
        app.kubernetes.io/part-of: mbhealth
    spec:
      serviceAccountName: mbhealth-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        # Wait for database and redis to be ready
        - name: wait-for-services
          image: busybox:1.35
          command:
            - sh
            - -c
            - |
              echo "Waiting for Redis..."
              until nc -z $REDIS_HOST $REDIS_PORT; do
                sleep 2
              done
              echo "Redis is ready!"
          env:
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_PORT
      containers:
        - name: worker
          image: mbhealth/worker:latest
          imagePullPolicy: IfNotPresent
          args:
            - "--loglevel=info"
            - "--concurrency=4"
            - "--max-tasks-per-child=1000"
            - "--max-memory-per-child=200000"  # 200MB
          env:
            # Build database URL from components
            - name: DATABASE_URL
              value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
            # Build Redis URL
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
            # Celery specific
            - name: CELERY_BROKER_URL
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
            - name: CELERY_RESULT_BACKEND
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
            - name: C_FORCE_ROOT
              value: "false"
            # Environment variables from ConfigMap
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: ENVIRONMENT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: LOG_LEVEL
            # Secrets
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: SECRET_KEY
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: DATABASE_USER
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: DATABASE_PASSWORD
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_HOST
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_PORT
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_NAME
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_PORT
            - name: REDIS_DB
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_DB
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: REDIS_PASSWORD
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: ENCRYPTION_KEY
                  optional: true
          envFrom:
            # Optional: Load all API keys
            - secretRef:
                name: mbhealth-api-keys
                optional: true
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          livenessProbe:
            exec:
              command:
                - celery
                - -A
                - app.core.celery_app
                - inspect
                - ping
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: app-logs
              mountPath: /app/logs
      volumes:
        - name: app-logs
          emptyDir: {}
---
# ServiceAccount for the worker
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mbhealth-worker
  namespace: mbhealth
  labels:
    app.kubernetes.io/name: mbhealth-worker
    app.kubernetes.io/component: worker