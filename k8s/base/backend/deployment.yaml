apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: mbhealth
  labels:
    app.kubernetes.io/name: mbhealth-backend
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: mbhealth
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mbhealth-backend
    app.kubernetes.io/component: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mbhealth-backend
  namespace: mbhealth
  labels:
    app.kubernetes.io/name: mbhealth-backend
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: mbhealth
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: mbhealth-backend
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mbhealth-backend
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: mbhealth
    spec:
      serviceAccountName: mbhealth-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        # Wait for database to be ready
        - name: wait-for-db
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER; do
                echo "Waiting for database..."
                sleep 2
              done
          env:
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_HOST
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_PORT
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: DATABASE_USER
      containers:
        - name: backend
          image: mbhealth/backend:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          env:
            # Build database URL from components
            - name: DATABASE_URL
              value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
            # Build Redis URL
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
            # Environment variables from ConfigMap
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: ENVIRONMENT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: LOG_LEVEL
            - name: DEBUG
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DEBUG
            - name: BACKEND_CORS_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: BACKEND_CORS_ORIGINS
            # Secrets
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: SECRET_KEY
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: DATABASE_USER
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: DATABASE_PASSWORD
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_HOST
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_PORT
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: DATABASE_NAME
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_PORT
            - name: REDIS_DB
              valueFrom:
                configMapKeyRef:
                  name: mbhealth-config
                  key: REDIS_DB
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: REDIS_PASSWORD
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: mbhealth-secret
                  key: ENCRYPTION_KEY
                  optional: true
          envFrom:
            # Optional: Load all API keys
            - secretRef:
                name: mbhealth-api-keys
                optional: true
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          livenessProbe:
            httpGet:
              path: /api/v1/health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/v1/health/ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: app-logs
              mountPath: /app/logs
      volumes:
        - name: app-logs
          emptyDir: {}
---
# ServiceAccount for the backend
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mbhealth-backend
  namespace: mbhealth
  labels:
    app.kubernetes.io/name: mbhealth-backend
    app.kubernetes.io/component: backend