"""Initial schema with all current models

Revision ID: 62a48937fff5
Revises: 
Create Date: 2025-06-30 11:41:47.038333

"""
from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '62a48937fff5'
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('timezone', sa.String(), nullable=False),
    sa.Column('ai_context_profile', sa.Text(), nullable=True),
    sa.Column('weight_unit', sa.String(), nullable=False),
    sa.Column('temperature_unit', sa.String(), nullable=False),
    sa.Column('height_unit', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('ai_providers',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('endpoint', sa.Text(), nullable=True),
    sa.Column('api_key_encrypted', sa.Text(), nullable=True),
    sa.Column('models', sa.JSON(), nullable=True),
    sa.Column('default_model', sa.String(), nullable=True),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_providers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_providers_id'), ['id'], unique=False)

    op.create_table('analysis_comparisons',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('analysis_ids', sa.JSON(), nullable=False),
    sa.Column('comparison_type', sa.String(), nullable=False),
    sa.Column('comparison_criteria', sa.JSON(), nullable=True),
    sa.Column('comparison_results', sa.JSON(), nullable=True),
    sa.Column('key_differences', sa.JSON(), nullable=True),
    sa.Column('statistical_insights', sa.JSON(), nullable=True),
    sa.Column('trend_analysis', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_shared', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analysis_comparisons', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_comparisons_id'), ['id'], unique=False)

    op.create_table('analysis_settings',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('auto_analysis_enabled', sa.Boolean(), nullable=True),
    sa.Column('analysis_frequency', sa.String(), nullable=True),
    sa.Column('preferred_providers', sa.JSON(), nullable=True),
    sa.Column('notification_preferences', sa.JSON(), nullable=True),
    sa.Column('default_analysis_types', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    with op.batch_alter_table('analysis_settings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_settings_id'), ['id'], unique=False)

    op.create_table('analysis_trends',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('trend_type', sa.String(), nullable=False),
    sa.Column('analysis_type', sa.String(), nullable=True),
    sa.Column('metric_focus', sa.String(), nullable=True),
    sa.Column('period_start', sa.DateTime(), nullable=False),
    sa.Column('period_end', sa.DateTime(), nullable=False),
    sa.Column('data_points_count', sa.Integer(), nullable=False),
    sa.Column('trend_direction', sa.String(), nullable=True),
    sa.Column('trend_strength', sa.Float(), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=True),
    sa.Column('correlation_coefficient', sa.Float(), nullable=True),
    sa.Column('regression_data', sa.JSON(), nullable=True),
    sa.Column('seasonal_patterns', sa.JSON(), nullable=True),
    sa.Column('outliers', sa.JSON(), nullable=True),
    sa.Column('key_insights', sa.JSON(), nullable=True),
    sa.Column('improvement_suggestions', sa.JSON(), nullable=True),
    sa.Column('next_analysis_suggestions', sa.JSON(), nullable=True),
    sa.Column('improvement_percentage', sa.Float(), nullable=True),
    sa.Column('rate_of_change', sa.Float(), nullable=True),
    sa.Column('calculated_at', sa.DateTime(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('is_significant', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analysis_trends', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_trends_id'), ['id'], unique=False)

    op.create_table('analysis_workflows',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('trigger_analysis_type', sa.String(length=100), nullable=False),
    sa.Column('trigger_conditions', sa.JSON(), nullable=True),
    sa.Column('workflow_steps', sa.JSON(), nullable=False),
    sa.Column('auto_execute', sa.Boolean(), nullable=True),
    sa.Column('max_concurrent_executions', sa.Integer(), nullable=True),
    sa.Column('total_executions', sa.Integer(), nullable=True),
    sa.Column('successful_executions', sa.Integer(), nullable=True),
    sa.Column('failed_executions', sa.Integer(), nullable=True),
    sa.Column('last_executed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('care_teams',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('care_teams', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_care_teams_id'), ['id'], unique=False)

    op.create_table('families',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('families', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_families_id'), ['id'], unique=False)

    op.create_table('health_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('metric_type', sa.String(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('systolic', sa.Float(), nullable=True),
    sa.Column('diastolic', sa.Float(), nullable=True),
    sa.Column('additional_data', sa.JSON(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('recorded_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('health_data', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_health_data_id'), ['id'], unique=False)

    op.create_table('notification_channels',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('channel_type', sa.Enum('EMAIL', 'DISCORD', 'SLACK', 'TEAMS', 'TELEGRAM', 'PUSHOVER', 'WEBHOOKS', 'SMS', 'CUSTOM', name='notificationchanneltype'), nullable=False),
    sa.Column('apprise_url', sa.Text(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('last_test_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_test_success', sa.Boolean(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification_templates',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('event_type', sa.Enum('ANALYSIS_COMPLETED', 'ANALYSIS_FAILED', 'SCHEDULE_COMPLETED', 'SCHEDULE_FAILED', 'WORKFLOW_COMPLETED', 'WORKFLOW_FAILED', 'WORKFLOW_STEP_FAILED', 'DAILY_SUMMARY', 'WEEKLY_SUMMARY', 'SYSTEM_ALERT', name='notificationeventtype'), nullable=False),
    sa.Column('channel_type', sa.Enum('EMAIL', 'DISCORD', 'SLACK', 'TEAMS', 'TELEGRAM', 'PUSHOVER', 'WEBHOOKS', 'SMS', 'CUSTOM', name='notificationchanneltype'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('subject_template', sa.String(length=200), nullable=True),
    sa.Column('body_template', sa.Text(), nullable=False),
    sa.Column('is_html', sa.Boolean(), nullable=True),
    sa.Column('available_variables', sa.JSON(), nullable=True),
    sa.Column('example_data', sa.JSON(), nullable=True),
    sa.Column('is_system_template', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workflow_templates',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('trigger_analysis_type', sa.String(length=100), nullable=False),
    sa.Column('trigger_conditions', sa.JSON(), nullable=True),
    sa.Column('workflow_steps', sa.JSON(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('provider_id', sa.String(), nullable=True),
    sa.Column('health_data_ids', sa.JSON(), nullable=False),
    sa.Column('analysis_type', sa.String(), nullable=False),
    sa.Column('provider_name', sa.String(), nullable=False),
    sa.Column('model_used', sa.String(), nullable=True),
    sa.Column('request_prompt', sa.Text(), nullable=False),
    sa.Column('response_content', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.Column('token_usage', sa.JSON(), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['ai_providers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_analyses', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_analyses_id'), ['id'], unique=False)

    op.create_table('analysis_schedules',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('schedule_type', sa.String(), nullable=False),
    sa.Column('frequency', sa.String(), nullable=True),
    sa.Column('interval_value', sa.Integer(), nullable=True),
    sa.Column('interval_unit', sa.String(), nullable=True),
    sa.Column('time_of_day', sa.String(), nullable=True),
    sa.Column('days_of_week', sa.JSON(), nullable=True),
    sa.Column('day_of_month', sa.Integer(), nullable=True),
    sa.Column('data_threshold_count', sa.Integer(), nullable=True),
    sa.Column('data_threshold_metric', sa.String(), nullable=True),
    sa.Column('analysis_types', sa.JSON(), nullable=False),
    sa.Column('data_selection_config', sa.JSON(), nullable=False),
    sa.Column('provider_id', sa.String(), nullable=True),
    sa.Column('additional_context', sa.Text(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('next_run_at', sa.DateTime(), nullable=True),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.Column('run_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['ai_providers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analysis_schedules', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_schedules_id'), ['id'], unique=False)

    op.create_table('care_team_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('care_team_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('can_view_data', sa.Boolean(), nullable=True),
    sa.Column('can_add_notes', sa.Boolean(), nullable=True),
    sa.Column('can_edit_data', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['care_team_id'], ['care_teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('care_team_members', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_care_team_members_id'), ['id'], unique=False)

    op.create_table('family_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('family_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('can_view_data', sa.Boolean(), nullable=True),
    sa.Column('can_add_notes', sa.Boolean(), nullable=True),
    sa.Column('can_edit_data', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['family_id'], ['families.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('family_members', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_family_members_id'), ['id'], unique=False)

    op.create_table('notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('health_data_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['health_data_id'], ['health_data.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_notes_id'), ['id'], unique=False)

    op.create_table('notification_preferences',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('channel_id', sa.String(), nullable=False),
    sa.Column('event_type', sa.Enum('ANALYSIS_COMPLETED', 'ANALYSIS_FAILED', 'SCHEDULE_COMPLETED', 'SCHEDULE_FAILED', 'WORKFLOW_COMPLETED', 'WORKFLOW_FAILED', 'WORKFLOW_STEP_FAILED', 'DAILY_SUMMARY', 'WEEKLY_SUMMARY', 'SYSTEM_ALERT', name='notificationeventtype'), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('minimum_priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='notificationpriority'), nullable=False),
    sa.Column('quiet_hours_start', sa.String(length=5), nullable=True),
    sa.Column('quiet_hours_end', sa.String(length=5), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('max_per_hour', sa.Integer(), nullable=True),
    sa.Column('max_per_day', sa.Integer(), nullable=True),
    sa.Column('include_analysis_content', sa.Boolean(), nullable=True),
    sa.Column('include_summary_stats', sa.Boolean(), nullable=True),
    sa.Column('include_recommendations', sa.Boolean(), nullable=True),
    sa.Column('filters', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['channel_id'], ['notification_channels.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification_rate_limits',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('channel_id', sa.String(), nullable=False),
    sa.Column('event_type', sa.Enum('ANALYSIS_COMPLETED', 'ANALYSIS_FAILED', 'SCHEDULE_COMPLETED', 'SCHEDULE_FAILED', 'WORKFLOW_COMPLETED', 'WORKFLOW_FAILED', 'WORKFLOW_STEP_FAILED', 'DAILY_SUMMARY', 'WEEKLY_SUMMARY', 'SYSTEM_ALERT', name='notificationeventtype'), nullable=False),
    sa.Column('hour_window', sa.DateTime(timezone=True), nullable=False),
    sa.Column('day_window', sa.DateTime(timezone=True), nullable=False),
    sa.Column('hour_count', sa.Integer(), nullable=True),
    sa.Column('day_count', sa.Integer(), nullable=True),
    sa.Column('last_hour_reset', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_day_reset', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['channel_id'], ['notification_channels.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provider_performance_metrics',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('provider_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('period_start', sa.DateTime(), nullable=False),
    sa.Column('period_end', sa.DateTime(), nullable=False),
    sa.Column('period_type', sa.String(), nullable=False),
    sa.Column('total_analyses', sa.Integer(), nullable=True),
    sa.Column('successful_analyses', sa.Integer(), nullable=True),
    sa.Column('failed_analyses', sa.Integer(), nullable=True),
    sa.Column('avg_processing_time', sa.Float(), nullable=True),
    sa.Column('total_cost', sa.Float(), nullable=True),
    sa.Column('avg_cost_per_analysis', sa.Float(), nullable=True),
    sa.Column('avg_response_length', sa.Float(), nullable=True),
    sa.Column('avg_token_usage', sa.Float(), nullable=True),
    sa.Column('user_satisfaction_score', sa.Float(), nullable=True),
    sa.Column('analysis_type_breakdown', sa.JSON(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('efficiency_score', sa.Float(), nullable=True),
    sa.Column('reliability_score', sa.Float(), nullable=True),
    sa.Column('calculated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['ai_providers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('provider_performance_metrics', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_provider_performance_metrics_id'), ['id'], unique=False)

    op.create_table('analysis_history',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('analysis_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('action_details', sa.JSON(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('analysis_snapshot', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['ai_analyses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analysis_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_history_id'), ['id'], unique=False)

    op.create_table('analysis_improvement_suggestions',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('analysis_id', sa.Integer(), nullable=True),
    sa.Column('suggestion_type', sa.String(), nullable=False),
    sa.Column('priority_level', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('detailed_explanation', sa.Text(), nullable=True),
    sa.Column('action_steps', sa.JSON(), nullable=True),
    sa.Column('expected_improvement', sa.String(), nullable=True),
    sa.Column('effort_level', sa.String(), nullable=True),
    sa.Column('implementation_time', sa.String(), nullable=True),
    sa.Column('supporting_data', sa.JSON(), nullable=True),
    sa.Column('related_analyses', sa.JSON(), nullable=True),
    sa.Column('success_examples', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('implementation_notes', sa.Text(), nullable=True),
    sa.Column('implemented_at', sa.DateTime(), nullable=True),
    sa.Column('effectiveness_score', sa.Float(), nullable=True),
    sa.Column('follow_up_analysis_ids', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['ai_analyses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analysis_improvement_suggestions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_improvement_suggestions_id'), ['id'], unique=False)

    op.create_table('analysis_jobs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('analysis_id', sa.Integer(), nullable=False),
    sa.Column('provider_id', sa.String(), nullable=True),
    sa.Column('job_id', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['ai_analyses.id'], ),
    sa.ForeignKeyConstraint(['provider_id'], ['ai_providers.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analysis_jobs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_jobs_id'), ['id'], unique=False)

    op.create_table('analysis_schedule_executions',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('schedule_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('analyses_created', sa.JSON(), nullable=True),
    sa.Column('analyses_count', sa.Integer(), nullable=True),
    sa.Column('success_count', sa.Integer(), nullable=True),
    sa.Column('failure_count', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('execution_type', sa.String(), nullable=False),
    sa.Column('trigger_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['schedule_id'], ['analysis_schedules.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('analysis_schedule_executions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_analysis_schedule_executions_id'), ['id'], unique=False)

    op.create_table('analysis_workflow_executions',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('workflow_id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('trigger_analysis_id', sa.Integer(), nullable=False),
    sa.Column('trigger_analysis_result', sa.JSON(), nullable=True),
    sa.Column('execution_type', sa.String(length=50), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('current_step', sa.Integer(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('step_results', sa.JSON(), nullable=True),
    sa.Column('created_analyses', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['trigger_analysis_id'], ['ai_analyses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['analysis_workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification_history',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('channel_id', sa.String(), nullable=True),
    sa.Column('event_type', sa.Enum('ANALYSIS_COMPLETED', 'ANALYSIS_FAILED', 'SCHEDULE_COMPLETED', 'SCHEDULE_FAILED', 'WORKFLOW_COMPLETED', 'WORKFLOW_FAILED', 'WORKFLOW_STEP_FAILED', 'DAILY_SUMMARY', 'WEEKLY_SUMMARY', 'SYSTEM_ALERT', name='notificationeventtype'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='notificationpriority'), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'FAILED', 'RETRY', name='notificationstatus'), nullable=False),
    sa.Column('subject', sa.String(length=200), nullable=True),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('analysis_id', sa.Integer(), nullable=True),
    sa.Column('schedule_id', sa.String(), nullable=True),
    sa.Column('workflow_id', sa.String(), nullable=True),
    sa.Column('execution_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['ai_analyses.id'], ),
    sa.ForeignKeyConstraint(['channel_id'], ['notification_channels.id'], ),
    sa.ForeignKeyConstraint(['schedule_id'], ['analysis_schedules.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['analysis_workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification_queue',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('channel_id', sa.String(), nullable=False),
    sa.Column('event_type', sa.Enum('ANALYSIS_COMPLETED', 'ANALYSIS_FAILED', 'SCHEDULE_COMPLETED', 'SCHEDULE_FAILED', 'WORKFLOW_COMPLETED', 'WORKFLOW_FAILED', 'WORKFLOW_STEP_FAILED', 'DAILY_SUMMARY', 'WEEKLY_SUMMARY', 'SYSTEM_ALERT', name='notificationeventtype'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='notificationpriority'), nullable=True),
    sa.Column('subject', sa.String(length=200), nullable=True),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('template_data', sa.JSON(), nullable=True),
    sa.Column('scheduled_for', sa.DateTime(timezone=True), nullable=True),
    sa.Column('max_retry_count', sa.Integer(), nullable=True),
    sa.Column('current_retry_count', sa.Integer(), nullable=True),
    sa.Column('analysis_id', sa.Integer(), nullable=True),
    sa.Column('schedule_id', sa.String(), nullable=True),
    sa.Column('workflow_id', sa.String(), nullable=True),
    sa.Column('execution_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['ai_analyses.id'], ),
    sa.ForeignKeyConstraint(['channel_id'], ['notification_channels.id'], ),
    sa.ForeignKeyConstraint(['schedule_id'], ['analysis_schedules.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['analysis_workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workflow_step_results',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('execution_id', sa.String(length=36), nullable=False),
    sa.Column('step_number', sa.Integer(), nullable=False),
    sa.Column('step_name', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('analysis_id', sa.Integer(), nullable=True),
    sa.Column('analysis_type', sa.String(length=100), nullable=True),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('output_data', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['ai_analyses.id'], ),
    sa.ForeignKeyConstraint(['execution_id'], ['analysis_workflow_executions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('workflow_step_results')
    op.drop_table('notification_queue')
    op.drop_table('notification_history')
    op.drop_table('analysis_workflow_executions')
    with op.batch_alter_table('analysis_schedule_executions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_schedule_executions_id'))

    op.drop_table('analysis_schedule_executions')
    with op.batch_alter_table('analysis_jobs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_jobs_id'))

    op.drop_table('analysis_jobs')
    with op.batch_alter_table('analysis_improvement_suggestions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_improvement_suggestions_id'))

    op.drop_table('analysis_improvement_suggestions')
    with op.batch_alter_table('analysis_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_history_id'))

    op.drop_table('analysis_history')
    with op.batch_alter_table('provider_performance_metrics', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_provider_performance_metrics_id'))

    op.drop_table('provider_performance_metrics')
    op.drop_table('notification_rate_limits')
    op.drop_table('notification_preferences')
    with op.batch_alter_table('notes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_notes_id'))

    op.drop_table('notes')
    with op.batch_alter_table('family_members', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_family_members_id'))

    op.drop_table('family_members')
    with op.batch_alter_table('care_team_members', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_care_team_members_id'))

    op.drop_table('care_team_members')
    with op.batch_alter_table('analysis_schedules', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_schedules_id'))

    op.drop_table('analysis_schedules')
    with op.batch_alter_table('ai_analyses', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_analyses_id'))

    op.drop_table('ai_analyses')
    op.drop_table('workflow_templates')
    op.drop_table('notification_templates')
    op.drop_table('notification_channels')
    with op.batch_alter_table('health_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_health_data_id'))

    op.drop_table('health_data')
    with op.batch_alter_table('families', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_families_id'))

    op.drop_table('families')
    with op.batch_alter_table('care_teams', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_care_teams_id'))

    op.drop_table('care_teams')
    op.drop_table('analysis_workflows')
    with op.batch_alter_table('analysis_trends', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_trends_id'))

    op.drop_table('analysis_trends')
    with op.batch_alter_table('analysis_settings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_settings_id'))

    op.drop_table('analysis_settings')
    with op.batch_alter_table('analysis_comparisons', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_analysis_comparisons_id'))

    op.drop_table('analysis_comparisons')
    with op.batch_alter_table('ai_providers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_providers_id'))

    op.drop_table('ai_providers')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###
