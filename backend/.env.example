# MBHealth Backend Configuration
# Copy this file to .env and update the values for your environment

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Secret key for JWT token generation (CHANGE THIS IN PRODUCTION!)
# Generate a secure key: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-super-secret-key-here-make-it-long-and-random

# JWT algorithm and token expiration
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# SQLite (Development - Default)
DATABASE_URL=sqlite:///./health_data.db

# PostgreSQL (Production - Recommended)
# Replace with your PostgreSQL connection details
# DATABASE_URL=postgresql://username:password@localhost:5432/mbhealth

# PostgreSQL Examples:
# Local PostgreSQL:
# DATABASE_URL=postgresql://mbhealth:your_password@localhost:5432/mbhealth
#
# Docker PostgreSQL (from docker-compose.yml):
# DATABASE_URL=postgresql://mbhealth:mbhealth_password@postgres:5432/mbhealth
#
# Cloud PostgreSQL (Heroku example):
# DATABASE_URL=postgresql://user:pass@hostname:5432/dbname
#
# Cloud PostgreSQL (AWS RDS example):
# DATABASE_URL=postgresql://user:pass@mydb.123456.us-east-1.rds.amazonaws.com:5432/mbhealth

# =============================================================================
# REDIS CONFIGURATION (Required for background processing)
# =============================================================================

# Redis URL for caching and session storage
REDIS_URL=redis://localhost:6379/0

# Celery broker and result backend (usually same as REDIS_URL)
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/1

# Docker Redis (if using docker-compose):
# REDIS_URL=redis://redis:6379/0
# CELERY_BROKER_URL=redis://redis:6379/0
# CELERY_RESULT_BACKEND=redis://redis:6379/1

# =============================================================================
# AI SERVICE API KEYS (Optional)
# =============================================================================

# OpenAI API Key (for GPT-4, GPT-3.5-turbo)
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# OpenRouter API Key (for access to multiple AI models)
# Get from: https://openrouter.ai/keys
OPENROUTER_API_KEY=your-openrouter-api-key-here

# Google AI API Key (for Gemini models)
# Get from: https://makersuite.google.com/app/apikey
GOOGLE_AI_API_KEY=your-google-ai-api-key-here

# Anthropic API Key (for Claude models)
# Get from: https://console.anthropic.com/
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# =============================================================================
# CORS SETTINGS
# =============================================================================

# Allowed origins for CORS (comma-separated)
# Development:
BACKEND_CORS_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://localhost:3000

# Production (update with your domains):
# BACKEND_CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# =============================================================================
# NOTIFICATION SYSTEM
# =============================================================================

# Encryption key for notification service URLs (32 characters)
# Generate: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
ENCRYPTION_KEY=your-32-character-encryption-key-here

# =============================================================================
# TIMEZONE SETTINGS
# =============================================================================

# Default timezone for the application
DEFAULT_TIMEZONE=America/New_York

# =============================================================================
# WEBSOCKET CONFIGURATION
# =============================================================================

# WebSocket URL for real-time updates
WEBSOCKET_URL=ws://localhost:8000/ws

# Production WebSocket URL:
# WEBSOCKET_URL=wss://yourdomain.com/ws

# =============================================================================
# DEVELOPMENT/DEBUG SETTINGS
# =============================================================================

# Set to true for development, false for production
DEBUG=true

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# =============================================================================
# PRODUCTION DEPLOYMENT SETTINGS
# =============================================================================

# Uncomment and configure for production deployment

# Environment
# ENVIRONMENT=production

# Database connection pooling
# DATABASE_POOL_SIZE=10
# DATABASE_MAX_OVERFLOW=20

# Gunicorn settings (if using Gunicorn)
# WORKERS=4
# WORKER_CLASS=uvicorn.workers.UvicornWorker
# BIND=0.0.0.0:8000

# SSL/TLS settings
# SSL_KEYFILE=/path/to/ssl/key.pem
# SSL_CERTFILE=/path/to/ssl/cert.pem

# Security headers
# SECURE_SSL_REDIRECT=true
# SECURE_HSTS_SECONDS=31536000

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# Local Development with PostgreSQL:
# DATABASE_URL=postgresql://mbhealth:password@localhost:5432/mbhealth
# REDIS_URL=redis://localhost:6379/0
# BACKEND_CORS_ORIGINS=http://localhost:5173

# Docker Development:
# DATABASE_URL=postgresql://mbhealth:mbhealth_password@postgres:5432/mbhealth
# REDIS_URL=redis://redis:6379/0
# BACKEND_CORS_ORIGINS=http://localhost:5173

# Production Example:
# DATABASE_URL=postgresql://prod_user:secure_password@prod-db.example.com:5432/mbhealth_prod
# REDIS_URL=redis://prod-redis.example.com:6379/0
# SECRET_KEY=very-long-and-secure-production-secret-key
# BACKEND_CORS_ORIGINS=https://health.yourdomain.com
# ENVIRONMENT=production
# DEBUG=false